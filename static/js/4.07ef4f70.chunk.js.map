{"version":3,"sources":["hoc/withAuthRedirect.js","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogUsers/DialogUsers.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","useStyles","makeStyles","theme","profileMyPost","margin","myPostContainer","padding","myPostButton","AddMessageForm","classes","onSubmit","render","handleSubmit","className","createField","Textarea","Button","variant","color","endIcon","type","name","wrapperMessage","fontSize","Message","id","message","dialogUser","dialogUserLink","textDecoration","DialogUsers","path","wrapperDialogs","display","gridTemplateColumns","gridGap","dialogUsers","background","palette","common","white","borderRadius","dialogMessage","Dialogs","dialogsPage","sendMessage","dialogsDataNew","dialogsData","map","element","messageDataNew","messageData","formData","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"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","file":"static/js/4.07ef4f70.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport function withAuthRedirect(Component) {\r\n    const RedirectComponent = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps} />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect,\r\n        {})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}","import {Form} from \"react-final-form\";\r\nimport React from \"react\";\r\nimport {createField, Textarea} from \"../../common/FormsControls/formControls\";\r\nimport {Button, Theme} from \"@mui/material\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport {makeStyles} from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    profileMyPost: {\r\n        margin: \"25px\"\r\n    },\r\n    myPostContainer: {\r\n        padding: \"8px\"\r\n    },\r\n    myPostButton: {\r\n        padding: \"15px 0px 15px 32px \"\r\n    }\r\n}))\r\n\r\ntype InitialPropsType = {\r\n    onSubmit: (newMessageBody: string) => void\r\n}\r\n\r\n\r\nexport const AddMessageForm: React.FC<InitialPropsType> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n                onSubmit={props.onSubmit}\r\n                render={({handleSubmit}) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <div className={classes.myPostContainer}>\r\n                            <div>\r\n                                {createField(\"Enter you message\", \"newMessageBody\", [], Textarea, \"Message\")}\r\n                            </div>\r\n                            <div className={classes.myPostButton}>\r\n                                <Button variant=\"contained\"\r\n                                        color=\"info\"\r\n                                        endIcon={<SendIcon/>}\r\n                                        type=\"submit\" name={\"btnAddPost\"}\r\n                                >\r\n                                    Send\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                )}\r\n            />\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react';\r\nimport {MessageType} from \"../../../Redux/dialogs-reducer\";\r\nimport {makeStyles} from \"@mui/styles\";\r\nimport {Theme} from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    wrapperMessage: {\r\n        padding: '5px',\r\n        fontSize: \"19px\",\r\n\r\n    },\r\n\r\n}))\r\n\r\nexport const Message: React.FC<MessageType> = ({id, message}) => {\r\n    const classes = useStyles();\r\n\r\n    return <div className={classes.wrapperMessage}>\r\n       <span>{id}.</span> {message}\r\n    </div>\r\n}\r\n\r\n","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogType} from \"../../../Redux/dialogs-reducer\";\r\nimport {makeStyles} from \"@mui/styles\";\r\nimport {Theme} from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    dialogUser: {\r\n        padding: '4px',\r\n        fontSize: \"17px\",\r\n    },\r\n    dialogUserLink: {\r\n        textDecoration: \"none\",\r\n        color: '#000000'\r\n    }\r\n}))\r\n\r\nexport const DialogUsers: React.FC<DialogType> = ({id, name}) => {\r\n    const classes = useStyles();\r\n\r\n    let path = \"/dialogs/\" + id;\r\n\r\n    return <div className={classes.dialogUser}>\r\n        <NavLink className={classes.dialogUserLink} to={path}>{name}</NavLink>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\nimport {Message} from './Message/Message';\r\nimport {InitialDialogStateType} from \"../../Redux/dialogs-reducer\";\r\nimport {DialogUsers} from \"./DialogUsers/DialogUsers\";\r\nimport {makeStyles} from \"@mui/styles\";\r\nimport {Theme} from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    wrapperDialogs: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '2fr 10fr',\r\n        gridGap: '1rem',\r\n    },\r\n    dialogUsers: {\r\n        background: theme.palette.common.white,\r\n        borderRadius: '6px',\r\n        padding: \"20px\",\r\n\r\n    },\r\n    dialogMessage: {\r\n        background: '#ffffff',\r\n        borderRadius: '6px',\r\n        padding: \"20px\",\r\n    }\r\n}))\r\n\r\ntype InitialPropsType = {\r\n    dialogsPage: InitialDialogStateType\r\n    sendMessage: (MessageText: string) => AddNewMessageType\r\n}\r\ntype AddNewMessageType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<InitialPropsType> = ({\r\n                                                 dialogsPage,\r\n                                                 sendMessage\r\n                                             }) => {\r\n    const classes = useStyles();\r\n\r\n    let state = dialogsPage;\r\n\r\n    let dialogsDataNew = state.dialogsData.map(\r\n        (element) => {\r\n            return <DialogUsers name={element.name}\r\n                                key={element.id}\r\n                                id={element.id}\r\n            />\r\n        }\r\n    )\r\n\r\n    let messageDataNew = state.messageData.map(\r\n        (element) => {\r\n            return <Message message={element.message}\r\n                            key={element.id}\r\n                            id={element.id}\r\n            />\r\n        }\r\n    )\r\n\r\n    let addNewMessage = (formData: any) => {\r\n        sendMessage(formData.newMessageBody)\r\n        formData.newMessageBody = \"\";\r\n    }\r\n\r\n    return <div className={classes.wrapperDialogs}>\r\n        <div className={classes.dialogUsers}>\r\n            {dialogsDataNew}\r\n        </div>\r\n        <div className={classes.dialogMessage}>\r\n            {messageDataNew}\r\n            <div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Dialogs","import React from 'react';\r\nimport {sendMessageCreator} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\n\r\n\r\nconst DialogsContainer: React.FC<any> = (props) => {\r\nreturn(\r\n    <Dialogs {...props}/>\r\n)\r\n}\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    dialogsPage: state.dialogsPage,\r\n})\r\n\r\nlet mapDispatchToProps = (dispatch: any) => ({\r\n    sendMessage: (newMessageBody: string) => {\r\n        dispatch(sendMessageCreator(newMessageBody))\r\n    }\r\n})\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(DialogsContainer)"],"sourceRoot":""}